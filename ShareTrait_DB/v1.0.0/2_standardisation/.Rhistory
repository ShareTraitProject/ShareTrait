0.046 / 20.083 * 1000 * 31.9988, # I am not sure about this one!!
1,
1 / 22.414 * 31.9988 / 0.85,
1 / 22.414 * 31.9988,
31.9988 / 1000000,
1,
1 / 22.414 * 31.9988 / 0.85 / 1000,
31.9988 /1000)
)
# Merge lockup table with original data
df_converted_step_1 <- left_join(df, conversion_table_unit, by = "extracted_unit")
# Calculate trait value rates for all rows and create a new column
df_converted_step_1 <- df_converted_step_1 %>%
mutate(trait_converted = trait_value * conversion_factor)
# select the units of time
time_unit <- "(day|month|min|second|30min|20min|h|Days|offspring number)"
# Extract the text and create a new column
df_converted_step_1$extracted_time_unit <- str_extract(df_converted_step_1$trait_unit, time_unit)
sort(unique(df_converted_step_1$extracted_time_unit))
# Define lockup table for conversion factors hours
conversion_table_time <- data.frame(
extracted_time_unit = c("day",
"Days",
"h",
"min",
"offspring number"),
conversion_factor_to_hours = c(1 / 24,
1,
1,
60,
1)
)
# Merge lookup table with original data
df_converted_step_2 <- left_join(df_converted_step_1, conversion_table_time, by = "extracted_time_unit")
# Calculate respiration rate per hour for all rows
df_converted_step_2 <- df_converted_step_2 %>%
mutate(trait_converted = trait_converted * conversion_factor_to_hours)
df_converted_step_2$extracted_size_unit <- str_extract(df_converted_step_2$trait_unit, "(Days|offspring number|ugN2|ugDM|ugCarbon|mgDM|mgFM|mgAFDM|gDM|gFM|100gFM|gAFDM|100gram|kgFM|ind)")
sort(unique(df_converted_step_2$extracted_size_unit))
# check the type of sizes used to express body size and check their units
sort(unique(df_converted_step_2$size_type))
sort(unique(df_converted_step_2$size_units))
df_converted_step_3 <- df_converted_step_2 %>%
mutate(trait_converted = case_when(
extracted_size_unit == "ind" ~ trait_converted,
extracted_size_unit == "Days" ~ trait_converted,
extracted_size_unit == "offspring number" ~ trait_converted,
extracted_size_unit == "gDM" & size_type == "dry body mass" & size_units == "gram" ~ trait_converted * size_value,
extracted_size_unit == "kgFM" & size_type == "fresh body mass" & size_units == "kilogram" ~ trait_converted * size_value,
TRUE ~ NA_real_ # The TRUE ~ NA_real_ statement handles the cases where none of the conditions match, assigning NA to trait_converted
))
df_converted_step_4 <- df_converted_step_3 %>%
mutate(fresh_mass_gram = case_when(
size_type == "fresh body mass" & size_units == "kilogram" ~ size_value * 1000,
size_type == "fresh body mass" & size_units == "gram" ~ size_value,
size_type == "fresh body mass" & size_units == "microgram" ~ size_value / 1000000,
size_type == "fresh body mass" & size_units == "milligram" ~ size_value / 1000,
size_type == "fresh body mass" & size_units == "nanogram" ~ size_value / 1000000000,
size_type == "dry body mass" & size_units == "gram" ~ size_value / 0.25,
size_type == "dry body mass" & size_units == "kilogram" ~ size_value * 1000 / 0.25,
size_type == "dry body mass" & size_units == "microgram" ~ size_value / 1000000 / 0.25,
size_type == "dry body mass" & size_units == "milligram" ~ size_value / 1000 / 0.25,
size_type == "dry body mass" & size_units == "nanogram" ~ size_value / 1000000000/ 0.25,
size_type == "total length" & size_units == "millimeter" & dataset_id == "Hermaniuk_et_al_2021" ~ (size_value ^ 3) / 1000 ,
TRUE ~ NA_real_ # The TRUE ~ NA_real_ statement handles the cases where none of the conditions match, assigning NAs.
))
# delete authors information and non relevant columns
df_converted_step_4 <- df_converted_step_4 %>%
select(-name_contact) %>%
select(-email_contact) %>%
select(-extracted_unit) %>%
select(-conversion_factor) %>%
select(-conversion_factor_to_hours) %>%
select(-extracted_size_unit) %>%
select(-extracted_time_unit)
names(df_converted_step_4)
# Save the cleaned dataframe to a new file
write.csv(df_converted_step_4, "/2_2_ShareTrait_DataBase_v1.0.0.csv", row.names = FALSE)
df_converted_step_4 <- df_converted_step_3 %>%
mutate(fresh_mass_gram = case_when(
size_type == "fresh body mass" & size_units == "kilogram" ~ size_value * 1000,
size_type == "fresh body mass" & size_units == "gram" ~ size_value,
size_type == "fresh body mass" & size_units == "microgram" ~ size_value / 1000000,
size_type == "fresh body mass" & size_units == "milligram" ~ size_value / 1000,
size_type == "fresh body mass" & size_units == "nanogram" ~ size_value / 1000000000,
size_type == "dry body mass" & size_units == "gram" ~ size_value / 0.25,
size_type == "dry body mass" & size_units == "kilogram" ~ size_value * 1000 / 0.25,
size_type == "dry body mass" & size_units == "microgram" ~ size_value / 1000000 / 0.25,
size_type == "dry body mass" & size_units == "milligram" ~ size_value / 1000 / 0.25,
size_type == "dry body mass" & size_units == "nanogram" ~ size_value / 1000000000/ 0.25,
size_type == "total length" & size_units == "millimeter" & dataset_id == "Hermaniuk_et_al_2021" ~ (size_value ^ 3) / 1000 ,
TRUE ~ NA_real_ # The TRUE ~ NA_real_ statement handles the cases where none of the conditions match, assigning NAs.
))
# delete authors information and non relevant columns
df_converted_step_4 <- df_converted_step_4 %>%
select(-name_contact) %>%
select(-email_contact) %>%
select(-extracted_unit) %>%
select(-conversion_factor) %>%
select(-conversion_factor_to_hours) %>%
select(-extracted_size_unit) %>%
select(-extracted_time_unit)
names(df_converted_step_4)
# Save the cleaned dataframe to a new file
write.csv(df_converted_step_4, "../outputs/2_2_ShareTrait_DataBase.csv", row.names = FALSE)
# Cleaning working space
rm(list=ls())
# check directory
getwd()
#Libraries
library(dplyr)
library(tidyverse)
library(stringr)
#load data
df <- read.csv("../outputs/2_1_ShareTrait_database.csv",sep = ",",header = TRUE)
# check trait units
unique(df$trait_unit)
# Standardize units of fecundity
df$trait_unit[df$trait_unit ==  "Egg load at adult emergence" ]         <- "offspring number"
df$trait_unit[df$trait_unit ==  "Number of eggs" ]                      <- "offspring number"
df$trait_unit[df$trait_unit ==  "Total number of offspring" ]           <- "offspring number"
df$trait_unit[df$trait_unit ==  "Number of eggs per female" ]           <- "offspring number"
df$trait_unit[df$trait_unit ==  "number of mature eggs"]                <- "offspring number"
df$trait_unit[df$trait_unit ==  "number of hatched eggs"]               <- "offspring number"
df$trait_unit[df$trait_unit ==  "Number of eggs laid throughout life"]  <- "offspring number"
df$trait_unit[df$trait_unit ==  "number of eggs per female"]            <- "offspring number"
df$trait_unit[df$trait_unit ==  "number of eggs" ]                      <- "offspring number"
df$trait_unit[df$trait_unit ==  "cumulative number of eggs per female" ]<- "offspring number"
df$trait_unit[df$trait_unit ==  "number of eggs by female" ]            <- "offspring number"
# check trait units
unique(df$trait_unit)
# Standardize units of development
df$trait_unit[df$trait_unit ==  "days"]  <- "Days"
# check trait units
unique(df$trait_unit)
df$extracted_unit <- str_extract(df$trait_unit, "[^/]+")
sort(unique(df$extracted_unit))
conversion_table_unit <- data.frame(
extracted_unit = c("days",
"Joule",
"mgO2",
"mlCO2",
"mLO2",
"nmolO2",
"offspring number",
"uLCO2",
"umolO2"),
conversion_factor = c(1,
0.046 / 20.083 * 1000 * 31.9988, # I am not sure about this one!!
1,
1 / 22.414 * 31.9988 / 0.85,
1 / 22.414 * 31.9988,
31.9988 / 1000000,
1,
1 / 22.414 * 31.9988 / 0.85 / 1000,
31.9988 /1000)
)
# Merge lockup table with original data
df_converted_step_1 <- left_join(df, conversion_table_unit, by = "extracted_unit")
# Calculate trait value rates for all rows and create a new column
df_converted_step_1 <- df_converted_step_1 %>%
mutate(trait_converted = trait_value * conversion_factor)
# select the units of time
time_unit <- "(day|month|min|second|30min|20min|h|Days|offspring number)"
# Extract the text and create a new column
df_converted_step_1$extracted_time_unit <- str_extract(df_converted_step_1$trait_unit, time_unit)
sort(unique(df_converted_step_1$extracted_time_unit))
# Define lockup table for conversion factors hours
conversion_table_time <- data.frame(
extracted_time_unit = c("day",
"Days",
"h",
"min",
"offspring number"),
conversion_factor_to_hours = c(1 / 24,
1,
1,
60,
1)
)
# Merge lookup table with original data
df_converted_step_2 <- left_join(df_converted_step_1, conversion_table_time, by = "extracted_time_unit")
# Calculate respiration rate per hour for all rows
df_converted_step_2 <- df_converted_step_2 %>%
mutate(trait_converted = trait_converted * conversion_factor_to_hours)
df_converted_step_2$extracted_size_unit <- str_extract(df_converted_step_2$trait_unit, "(Days|offspring number|ugN2|ugDM|ugCarbon|mgDM|mgFM|mgAFDM|gDM|gFM|100gFM|gAFDM|100gram|kgFM|ind)")
sort(unique(df_converted_step_2$extracted_size_unit))
# check the type of sizes used to express body size and check their units
sort(unique(df_converted_step_2$size_type))
sort(unique(df_converted_step_2$size_units))
df_converted_step_3 <- df_converted_step_2 %>%
mutate(trait_converted = case_when(
extracted_size_unit == "ind" ~ trait_converted,
extracted_size_unit == "Days" ~ trait_converted,
extracted_size_unit == "offspring number" ~ trait_converted,
extracted_size_unit == "gDM" & size_type == "dry body mass" & size_units == "gram" ~ trait_converted * size_value,
extracted_size_unit == "kgFM" & size_type == "fresh body mass" & size_units == "kilogram" ~ trait_converted * size_value,
TRUE ~ NA_real_ # The TRUE ~ NA_real_ statement handles the cases where none of the conditions match, assigning NA to trait_converted
))
df_converted_step_4 <- df_converted_step_3 %>%
mutate(fresh_mass_gram = case_when(
size_type == "fresh body mass" & size_units == "kilogram" ~ size_value * 1000,
size_type == "fresh body mass" & size_units == "gram" ~ size_value,
size_type == "fresh body mass" & size_units == "microgram" ~ size_value / 1000000,
size_type == "fresh body mass" & size_units == "milligram" ~ size_value / 1000,
size_type == "fresh body mass" & size_units == "nanogram" ~ size_value / 1000000000,
size_type == "dry body mass" & size_units == "gram" ~ size_value / 0.25,
size_type == "dry body mass" & size_units == "kilogram" ~ size_value * 1000 / 0.25,
size_type == "dry body mass" & size_units == "microgram" ~ size_value / 1000000 / 0.25,
size_type == "dry body mass" & size_units == "milligram" ~ size_value / 1000 / 0.25,
size_type == "dry body mass" & size_units == "nanogram" ~ size_value / 1000000000/ 0.25,
size_type == "total length" & size_units == "millimeter" & dataset_id == "Hermaniuk_et_al_2021" ~ (size_value ^ 3) / 1000 ,
TRUE ~ NA_real_ # The TRUE ~ NA_real_ statement handles the cases where none of the conditions match, assigning NAs.
))
# delete authors information and non relevant columns
df_converted_step_4 <- df_converted_step_4 %>%
select(-name_contact) %>%
select(-email_contact) %>%
select(-extracted_unit) %>%
select(-conversion_factor) %>%
select(-conversion_factor_to_hours) %>%
select(-extracted_size_unit) %>%
select(-extracted_time_unit)
names(df_converted_step_4)
# Save the cleaned dataframe to a new file
write.csv(df_converted_step_4, "../outputs/2_2_ShareTrait_DataBase.csv", row.names = FALSE)
# The following code has been adapted from MetaR (https://github.com/felixpleiva/MetaR)
# by Felix P Leiva
# Cleaning working space
rm(list=ls())
# check directory
getwd()
#Libraries
library(dplyr)
library(tidyverse)
# Cleaning working space
rm(list=ls())
# check directory
getwd()
#Libraries
library(dplyr)
library(tidyverse)
library(stringr)
#load data
df <- read.csv("../outputs/2_1_ShareTrait_database.csv",sep = ",",header = TRUE)
# check trait units
unique(df$trait_unit)
# Standardize units of fecundity
df$trait_unit[df$trait_unit ==  "Egg load at adult emergence" ]         <- "offspring number"
df$trait_unit[df$trait_unit ==  "Number of eggs" ]                      <- "offspring number"
df$trait_unit[df$trait_unit ==  "Total number of offspring" ]           <- "offspring number"
df$trait_unit[df$trait_unit ==  "Number of eggs per female" ]           <- "offspring number"
df$trait_unit[df$trait_unit ==  "number of mature eggs"]                <- "offspring number"
df$trait_unit[df$trait_unit ==  "number of hatched eggs"]               <- "offspring number"
df$trait_unit[df$trait_unit ==  "Number of eggs laid throughout life"]  <- "offspring number"
df$trait_unit[df$trait_unit ==  "number of eggs per female"]            <- "offspring number"
df$trait_unit[df$trait_unit ==  "number of eggs" ]                      <- "offspring number"
df$trait_unit[df$trait_unit ==  "cumulative number of eggs per female" ]<- "offspring number"
df$trait_unit[df$trait_unit ==  "number of eggs by female" ]            <- "offspring number"
# check trait units
unique(df$trait_unit)
# Standardize units of development
df$trait_unit[df$trait_unit ==  "days"]  <- "Days"
# check trait units
unique(df$trait_unit)
df$extracted_unit <- str_extract(df$trait_unit, "[^/]+")
sort(unique(df$extracted_unit))
conversion_table_unit <- data.frame(
extracted_unit = c("days",
"Joule",
"mgO2",
"mlCO2",
"mLO2",
"nmolO2",
"offspring number",
"uLCO2",
"umolO2"),
conversion_factor = c(1,
0.046 / 20.083 * 1000 * 31.9988, # I am not sure about this one!!
1,
1 / 22.414 * 31.9988 / 0.85,
1 / 22.414 * 31.9988,
31.9988 / 1000000,
1,
1 / 22.414 * 31.9988 / 0.85 / 1000,
31.9988 /1000)
)
# Merge lockup table with original data
df_converted_step_1 <- left_join(df, conversion_table_unit, by = "extracted_unit")
# Calculate trait value rates for all rows and create a new column
df_converted_step_1 <- df_converted_step_1 %>%
mutate(trait_converted = trait_value * conversion_factor)
# select the units of time
time_unit <- "(day|month|min|second|30min|20min|h|Days|offspring number)"
# Extract the text and create a new column
df_converted_step_1$extracted_time_unit <- str_extract(df_converted_step_1$trait_unit, time_unit)
sort(unique(df_converted_step_1$extracted_time_unit))
# Define lockup table for conversion factors hours
conversion_table_time <- data.frame(
extracted_time_unit = c("day",
"Days",
"h",
"min",
"offspring number"),
conversion_factor_to_hours = c(1 / 24,
1,
1,
60,
1)
)
# Merge lookup table with original data
df_converted_step_2 <- left_join(df_converted_step_1, conversion_table_time, by = "extracted_time_unit")
# Calculate respiration rate per hour for all rows
df_converted_step_2 <- df_converted_step_2 %>%
mutate(trait_converted = trait_converted * conversion_factor_to_hours)
df_converted_step_2$extracted_size_unit <- str_extract(df_converted_step_2$trait_unit, "(Days|offspring number|ugN2|ugDM|ugCarbon|mgDM|mgFM|mgAFDM|gDM|gFM|100gFM|gAFDM|100gram|kgFM|ind)")
sort(unique(df_converted_step_2$extracted_size_unit))
# check the type of sizes used to express body size and check their units
sort(unique(df_converted_step_2$size_type))
sort(unique(df_converted_step_2$size_units))
df_converted_step_3 <- df_converted_step_2 %>%
mutate(trait_converted = case_when(
extracted_size_unit == "ind" ~ trait_converted,
extracted_size_unit == "Days" ~ trait_converted,
extracted_size_unit == "offspring number" ~ trait_converted,
extracted_size_unit == "gDM" & size_type == "dry body mass" & size_units == "gram" ~ trait_converted * size_value,
extracted_size_unit == "kgFM" & size_type == "fresh body mass" & size_units == "kilogram" ~ trait_converted * size_value,
TRUE ~ NA_real_ # The TRUE ~ NA_real_ statement handles the cases where none of the conditions match, assigning NA to trait_converted
))
df_converted_step_4 <- df_converted_step_3 %>%
mutate(fresh_mass_gram = case_when(
size_type == "fresh body mass" & size_units == "kilogram" ~ size_value * 1000,
size_type == "fresh body mass" & size_units == "gram" ~ size_value,
size_type == "fresh body mass" & size_units == "microgram" ~ size_value / 1000000,
size_type == "fresh body mass" & size_units == "milligram" ~ size_value / 1000,
size_type == "fresh body mass" & size_units == "nanogram" ~ size_value / 1000000000,
size_type == "dry body mass" & size_units == "gram" ~ size_value / 0.25,
size_type == "dry body mass" & size_units == "kilogram" ~ size_value * 1000 / 0.25,
size_type == "dry body mass" & size_units == "microgram" ~ size_value / 1000000 / 0.25,
size_type == "dry body mass" & size_units == "milligram" ~ size_value / 1000 / 0.25,
size_type == "dry body mass" & size_units == "nanogram" ~ size_value / 1000000000/ 0.25,
size_type == "total length" & size_units == "millimeter" & dataset_id == "Hermaniuk_et_al_2021" ~ (size_value ^ 3) / 1000 ,
TRUE ~ NA_real_ # The TRUE ~ NA_real_ statement handles the cases where none of the conditions match, assigning NAs.
))
# delete authors information and non relevant columns
df_converted_step_4 <- df_converted_step_4 %>%
select(-name_contact) %>%
select(-email_contact) %>%
select(-extracted_unit) %>%
select(-conversion_factor) %>%
select(-conversion_factor_to_hours) %>%
select(-extracted_size_unit) %>%
select(-extracted_time_unit)
names(df_converted_step_4)
# Save the cleaned dataframe to a new file
write.csv(df_converted_step_4, "../outputs/2_2_ShareTrait_DataBase.csv", row.names = FALSE)
sink("../outputs/2_2_trait_units_R_session.txt")
sessionInfo()
sink()
rm(list=ls()) #clear your work environment
# Libraries
library(dplyr)
library(Hmisc)
library(stringr)
library(rgbif)
# load data
dat<-read.csv("../outputs/2_1_ShareTrait_database.csv",sep = ",",header = TRUE)
species = as.character(dat[,"species_reported"])
# create vector name
mynames <-na.omit(unique(ifelse(is.na(species),as.character(dat$genus),paste(dat$genus,species))))
# check number of names
length(mynames)
gbiftestout_df <- llply(mynames, NCBI_classif,db='ncbi',.progress = "text")
dfnames.ncbi  = sapply(gbiftestout_df,as.data.frame)
dfnames.ncbi  = sapply(dfnames.ncbi,unlist)
dfnames.ncbi = t(dfnames.ncbi)
# Functions
source("../outputs/Retrieve_taxonomy.R")
# Code adapted by FP Leiva from:
# Lenoir, J., Bertrand, R., Comte, L. et al. Species better track climate
# warming in the oceans than on land. Nat Ecol Evol 4, 1044–1059 (2020).
# https://doi.org/10.1038/s41559-020-1198-2
rm(list=ls()) #clear your work environment
# Libraries
library(dplyr)
library(Hmisc)
# load data
dat<-read.csv("../outputs/2_1_ShareTrait_database.csv",sep = ",",header = TRUE)
species = as.character(dat[,"species_reported"])
# create vector name
mynames <-na.omit(unique(ifelse(is.na(species),as.character(dat$genus),paste(dat$genus,species))))
# check number of names
length(mynames)
gbiftestout_df <- llply(mynames, NCBI_classif,db='ncbi',.progress = "text")
dfnames.ncbi  = sapply(gbiftestout_df,as.data.frame)
dfnames.ncbi  = sapply(dfnames.ncbi,unlist)
dfnames.ncbi = t(dfnames.ncbi)
# Code adapted by FP Leiva from:
# Lenoir, J., Bertrand, R., Comte, L. et al. Species better track climate
# warming in the oceans than on land. Nat Ecol Evol 4, 1044–1059 (2020).
# https://doi.org/10.1038/s41559-020-1198-2
rm(list=ls()) #clear your work environment
# Libraries
library(dplyr)
library(Hmisc)
rm(list=ls()) #clear your work environment
# Libraries
library(dplyr)
library(Hmisc)
library(tidyverse)
library(stringr)
library(rgbif)
library(taxize)
library(plyr)
# Functions
source("../outputs/Retrieve_taxonomy.R")
# load data
dat<-read.csv("../outputs/2_1_ShareTrait_database.csv",sep = ",",header = TRUE)
species = as.character(dat[,"species_reported"])
# create vector name
mynames <-na.omit(unique(ifelse(is.na(species),as.character(dat$genus),paste(dat$genus,species))))
# check number of names
length(mynames)
gbiftestout_df <- llply(mynames, NCBI_classif,db='ncbi',.progress = "text")
# Functions
source("../outputs/Retrieve_taxonomy.R")
# load data
dat<-read.csv("../outputs/2_2_ShareTrait_database.csv",sep = ",",header = TRUE)
# load data
dat<-read.csv("../outputs/2_1_ShareTrait_database.csv",sep = ",",header = TRUE)
# load data
dat<-read.csv("../outputs/2_1_ShareTrait_database.csv",sep = ",",header = TRUE)
rm(list=ls()) #clear your work environment
# Libraries
library(dplyr)
library(Hmisc)
library(tidyverse)
library(stringr)
library(rgbif)
library(taxize)
library(plyr)
# Functions
source("../outputs/Retrieve_taxonomy.R")
# load data
dat<-read.csv("../outputs/2_2_ShareTrait_database.csv",sep = ",",header = TRUE)
species = as.character(dat[,"species_reported"])
# create vector name
mynames <-na.omit(unique(ifelse(is.na(species),as.character(dat$genus),paste(dat$genus,species))))
# check number of names
length(mynames)
gbiftestout_df <- llply(mynames, NCBI_classif,db='ncbi',.progress = "text")
dfnames.ncbi  = sapply(gbiftestout_df,as.data.frame)
dfnames.ncbi  = sapply(dfnames.ncbi,unlist)
dfnames.ncbi = t(dfnames.ncbi)
dfnames.ncbi  = data.frame(dfnames.ncbi)
colnames(dfnames.ncbi) <- c("phylum", "class", "order", "family","genus","species","species_reported")
dfnames.ncbi  = apply(dfnames.ncbi,2,unlist)
dfnames.ncbi  = apply(dfnames.ncbi,2,as.character)
dfnames.ncbi  = data.frame(dfnames.ncbi)
## 1 -Check for changes in species names
na.omit(cbind(as.character(dfnames.ncbi$species_reported[which(!dfnames.ncbi$species_reported %in% dfnames.ncbi$species)]),
as.character(dfnames.ncbi$species[which(!dfnames.ncbi$species_reported %in% dfnames.ncbi$species)])))
## 2 -Select unidentified species & remove from the table
unid.ncbi = dfnames.ncbi$species_reported[which(sapply(strsplit(as.character(dfnames.ncbi$species_reported)," "),length)== 2 & is.na(dfnames.ncbi$species))]
## 3 - save file
if (length(unid.ncbi)>0){
dfnames.ncbi = dfnames.ncbi[-which(sapply(strsplit(as.character(dfnames.ncbi$species_reported)," "),length)== 2 & is.na(dfnames.ncbi$species)),]
}
dfnames.ncbi = apply(dfnames.ncbi,2,as.character)
write.table(dfnames.ncbi,"../outputs/dfnames.ncbi.txt")
#4 - compile
dfnames.ncbi = read.table("../outputs/dfnames.ncbi.txt",h=T)
source.ncbi = rep('ncbi',nrow(dfnames.ncbi))
taxo_level = ifelse(sapply(strsplit(as.character(dfnames.ncbi$species_reported)," "),length) == 1,"Genus","Species")
finaltab = data.frame(dfnames.ncbi,source.ncbi,taxo_level)
colnames(finaltab)=c("phylum","class","order","family","genus","species","species_reported","source","taxo_level")
#/!\ STOP HERE IF length(unid.ncbi)=0
#/!\ all species have been retrieved no need to go further
length(unid.ncbi)
gbiftestout_df.itis <- llply(unid.ncbi, NCBI_classif,db='itis',.progress = "text")
dfnames.itis  = sapply(gbiftestout_df.itis,as.data.frame)
dfnames.itis  = sapply(dfnames.itis,unlist)
dfnames.itis = t(dfnames.itis)
dfnames.itis  = data.frame(dfnames.itis)
colnames(dfnames.itis) <- c("phylum", "class", "order", "family","genus","species","species_reported")
dfnames.itis  = apply(dfnames.itis,2,unlist)
dfnames.itis  = data.frame(dfnames.itis)
## 1 -Check for changes in species names
na.omit(cbind(as.character(dfnames.itis$species_reported[which(!dfnames.itis$species_reported %in% dfnames.itis$species)]),
as.character(dfnames.itis$species[which(!dfnames.itis$species_reported %in% dfnames.itis$species)])))
## 2 - Select unidentified species
unid.itis = dfnames.itis$species_reported[which(sapply(strsplit(as.character(dfnames.itis$species_reported)," "),length)== 2 & is.na(dfnames.itis$species))]
## 3 - save file
if (length(unid.itis)>0){
dfnames.itis = dfnames.itis[-which(sapply(strsplit(as.character(dfnames.itis$species_reported)," "),length)== 2 & is.na(dfnames.itis$species)),]
}
write.table(dfnames.itis,"../outputs/dfnames.itis.txt")
#4 - compile
dfnames.itis = read.table("../outputs/dfnames.itis.txt",h=T)
source.itis = rep('itis',nrow(dfnames.itis))
taxo_level = ifelse(sapply(strsplit(as.character(dfnames.itis$species_reported)," "),length) == 1,"Genus","Species")
dfnames.itis=data.frame(dfnames.itis,source.itis,taxo_level)
colnames(dfnames.itis)=c("phylum","class","order","family","genus","species","species_reported","source","taxo_level")
finaltab = rbind(finaltab,dfnames.itis)
length(unid.itis)
gbiftestout_df.gbif <- llply(as.character(unid.itis), GB_classif,.progress = "text")
dfnames.gbif  = sapply(gbiftestout_df.gbif,as.data.frame)
dfnames.gbif  = sapply(dfnames.gbif,unlist)
dfnames.gbif = t(dfnames.gbif)
dfnames.gbif  = data.frame(dfnames.gbif)
colnames(dfnames.gbif) <- c("phylum", "class", "order", "family","genus","species","species_reported")
gbiftestout_df.gbif <- llply(as.character(unid.itis), GB_classif,.progress = "text")
